#!/usr/bin/env python3
# vim: et ts=4 sw=4

import sys
import re

fund_names = ['TDB900', 'TDB902', 'TDB909', 'TDB911', 'TDB164', 'cash']
desired_ratio = [25, 25, 25, 25, 0, 0]

def input_cents(prompt):
    val = input(prompt)
    if val == '0':
        return 0
    else:
        m = re.match(r'^([\d,]+)\.(\d\d)$', val)
        if m == None:
            sys.exit('Error: invalid amount: ' + str(val))
        return int(m.group(1).replace(',','')) * 100 + int(m.group(2))

def print_cents(c):
    minus = '-' if c < 0 else ''
    return '${}{}.{:02}'.format(minus, abs(c)//100, abs(c)%100)

class AmountCalc:
    def __init__(self):
        self.get_inputs()
        self.calc_amount_changed()
        self.calc_transfer_amounts()
        self.print_results()

    def get_inputs(self):
        self.current_amounts = [
                input_cents("What's the balance of {}? ".format(fund))
                for fund in fund_names]
        self.total = sum(self.current_amounts)

    def calc_amount_changed(self):
        total_ratio = sum(desired_ratio)
        self.new_amounts = [(self.total * ratio) // total_ratio for ratio
                in desired_ratio]

        left_over = self.total - sum(self.new_amounts)
        self.new_amounts = [new_amount + (1 if i < left_over else 0)
                for i, new_amount in enumerate(self.new_amounts)]

        self.amount_changed = [new - current for new, current in
                zip(self.new_amounts, self.current_amounts)]

        assert sum(self.new_amounts) == self.total
        assert sum(self.amount_changed) == 0

    def calc_transfer_amounts(self):
        self.transfers = {}
        amounts_remaining = list(self.amount_changed)

        def add_transfer(from_account, to_account, amount):
            transfer_tuple = (from_account, to_account)
            self.transfers[transfer_tuple] = self.transfers.get(transfer_tuple, 0) + amount
            amounts_remaining[from_account] += amount
            amounts_remaining[to_account] -= amount

        for to_account in range(len(fund_names)):
            while amounts_remaining[to_account] > 0:
                for from_account in range(len(fund_names)):
                    if amounts_remaining[from_account] < 0:
                        transfer_amount = min(amounts_remaining[to_account],
                                -amounts_remaining[from_account])
                        add_transfer(from_account, to_account, transfer_amount)
                        break

        for account in range(len(fund_names)):
            total_from = sum(amount for (from_account, _), amount in
                    self.transfers.items() if from_account == account)
            total_to = sum(amount for (_, to_account), amount in
                    self.transfers.items() if to_account == account)

            if self.amount_changed[account] >= 0:
                assert total_from == 0
                assert total_to == self.amount_changed[account]
            else:
                assert total_from == -self.amount_changed[account]
                assert total_to == 0

    def print_results(self):
        print('')
        print('total: {}'.format(print_cents(self.total)))
        print('')
        print('change in balances:')
        for name, current, new, changed in zip(fund_names, self.current_amounts,
                self.new_amounts, self.amount_changed):
            print('{}: {} -> {}: {}'.format(name, print_cents(current),
                print_cents(new), print_cents(changed)))
        print('')
        print('transfers:')
        for (from_account, to_account), amount in sorted(self.transfers.items()):
            print('{} -> {}: {}'.format(fund_names[from_account],
                fund_names[to_account], print_cents(amount)))

AmountCalc()

#!/bin/bash
# vim: et sw=4 ts=4

set -e

if [ $# -lt 1 ]; then
    echo "Error: argument required"
    exit 1
fi

# go to dotfiles directory
script_path="$(readlink -f "${BASH_SOURCE[0]}")"
cd "$(dirname "$script_path")/.."

register_symlink ()
{
    source="$1"
    target="$2"

    source_short="${source#$HOME/}"
    mkdir -p "$(dirname "$source")"

    if [ -L "$source" ]; then
        current_target="$(readlink "$source")"
        if [ "$target" != "$current_target" ]; then
            echo ""
            echo "Symlink: $source"
            echo "New Target: $target"
            echo "Current target: $current_target"
            echo -n "Update symlink? [y/N] "
            read yn
            if [ "$yn" = "y" -o "$yn" = "Y" ]; then
                rm "$source"
                echo "Linking $source_short to $target"
                ln -s "$target" "$source"
            fi
        else
            echo "$source_short is correctly linked"
        fi
    elif [ -e "$source" ]; then
        echo ""
        echo "Symlink: $source"
        echo "Target: $target"
        echo -n "File already exists, move it to ${source_short}.bak? [y/N] "
        read yn
        if [ "$yn" = "y" -o "$yn" = "Y" ]; then
            mv "$source" "${source}.bak"
            echo "Linking $source_short to $target"
            ln -s "$target" "$source"
        fi
    else
        echo "Linking $source_short to $target"
        ln -s "$target" "$source"
    fi
}

case "$1" in
sync)
    echo "Updating from git..."
    git pull
    git submodule update --init --recursive

    echo "Checking symlinks..."
    while read -d '' -r symlink_file <&9; do
        case "$symlink_file" in
        *.sh) source "$symlink_file" ;;
        *)    register_symlink "$HOME/.$(basename "$symlink_file" .symlink)" "$symlink_file" ;;
        esac
    done 9< <(find $(pwd)* -mindepth 2 -maxdepth 2 -regex '.*\.symlink\(\.sh\)?' -print0)

    while read -d '' -r file <&9; do
        if [ ! -e "$file" ]; then
            echo -n "Found broken symlink ${file#$HOME/} -> "
            echo -n "$(readlink "$file"), delete it? [y/N] "
            read yn
            if [ "$yn" = "y" -o "$yn" = "Y" ]; then
                rm "$file"
            fi
        fi
    done 9< <(find "$HOME" "$HOME/.fonts" "$HOME/.config" -maxdepth 1 -type l -print0)

    echo "Updating ~/.dotfiles-path"
    echo $(pwd) > ~/.dotfiles-path

    # fc-cache -vf ~/.fonts
    ;;
status|commit|diff|add|push)
    git "$@"
    ;;
*)
    echo "Error: unknown argument: $1"
    exit 1
    ;;
esac

